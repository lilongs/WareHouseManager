using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using BULayer;

namespace InventoryManagersystem.ProductManager
{
    public partial class frmProductClassManager : Form
    {
        BUProductManagerResult MyPms = new BUProductManagerResult();
        BUClassAdd myBuClassAdd = new BUClassAdd();
        public frmProductClassManager()
        {
            InitializeComponent(); // 1
        }

        private void brnSearch_Click(object sender, EventArgs e)
        {
            string paramProductClassName = this.txtBoxProductName.Text.ToString();
            string paramProductClassCode = this.txtBoxProductCode.Text.ToString();
            bool isNotNull = MyPms.CheckProductClass(paramProductClassName,paramProductClassCode);
            if (isNotNull)
            {
                this.dvgData.DataSource = MyPms.GetProductClassTbl(paramProductClassName, paramProductClassCode);
            }
            else
            {
                MessageBox.Show("查无记录");
            }

        }

        private void btnModify_Click(object sender, EventArgs e)
        {
            int count = this.dvgData.SelectedRows.Count;
            if (count == 0)
            {
                MessageBox.Show("请先搜索/刷新并选择需要修改的用户行", "错误！", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            string paramClassName = this.dvgData.SelectedRows[0].Cells["ProductClassName"].Value.ToString();
            string paramRemark = this.dvgData.SelectedRows[0].Cells["Remark"].Value.ToString();
            int paramClassCode = Convert.ToInt32(this.dvgData.SelectedRows[0].Cells["ProductClassID"].Value);
            string paramEmployeeName= this.Tag.ToString();
            string ParentID = this.dvgData.SelectedRows[0].Cells["ParentID"].Value.ToString();

            frmProductClassModify myfrmClassAdd = new frmProductClassModify(paramClassName, paramRemark, paramClassCode, paramEmployeeName, ParentID);
            if (myfrmClassAdd.ShowDialog() == DialogResult.Yes)
            {
                frmProductClassManager_Load(sender, e);
            }
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            

            frmClassAdd myfrmClassAdd = new frmClassAdd();
            myfrmClassAdd.Tag = this.Tag.ToString();
            DialogResult dr = myfrmClassAdd.ShowDialog();
            if (dr == DialogResult.OK)
            {
                frmProductClassManager_Load(sender, e);
            }
        }

        private void frmProductClassManager_Load(object sender, EventArgs e)
        {
            //brnSearch_Click(sender,e);
         
            //加载主节点
            Bind_TreeView(trvPrdouctClass);

            trvPrdouctClass.ExpandAll();

        }
        #region   TreeView的数据绑定父\子、孙节点函数
        /// <summary>
        /// TreeView的数据绑定父节点函数
        /// </summary>
        /// <param name="treeview">TreeView控件ID名称</param>
        /// <param name="text">树控件要显示的文本的字段名称</param>
        public void Bind_TreeView(TreeView treeview)
        {
            DataTable mtDt = new DataTable();

            // mtDt = myBUSysInfo.GetSysInfo();  //测试注销
            mtDt = myBuClassAdd.GetClassList("");
            treeview.Nodes.Clear();
            for (int i = 0; i < mtDt.Rows.Count; i++)
            {
                TreeNode rootnode = new TreeNode();//创建根节点
                rootnode.Text = mtDt.Rows[i]["ProductClassName"].ToString();
                rootnode.Tag = mtDt.Rows[i]["ProductClassID"].ToString();
                string paramParentID = mtDt.Rows[i]["ProductClassID"].ToString(); 
                treeview.Nodes.Add(rootnode);//在添加完节点的内容之后，当然要添加根节点，
                CreateChildNodes(rootnode, paramParentID, rootnode.Text);//
            }
        }
        /// <summary>
        /// TreeView的数据绑定子节点函数
        /// </summary>
        /// <param name="treenode">上一级节点</param>
        /// <param name="parentName">数据表中字段名</param>
        /// <param name="text">树控件要显示的文本的字段名称</param>
        /// <param name="index">查询语句关键字</param>
        public void CreateChildNodes(TreeNode treenode, string paramParentID, string text)
        {


            //DataTable myCNode = myBUSysInfo.GetSysModuleInfo(parentSysID);
            DataTable myCNode = myBuClassAdd.GetClassList(paramParentID);
                //myBULogin.GetChildModuleList(paramRole, parentSysID);

            for (int i = 0; i < myCNode.Rows.Count; i++)
            {
                TreeNode childnode = new TreeNode();
                childnode.Text = myCNode.Rows[i]["ProductClassName"].ToString();
                childnode.Tag = myCNode.Rows[i]["ProductClassID"].ToString();
                treenode.Nodes.Add(childnode);
              
            }
        }
    
        #endregion
        private void btnDel_Click(object sender, EventArgs e)
        {
             if (this.dvgData.RowCount == 0)
            {
                MessageBox.Show("请选择要删除的用户！");
                return;
            }
            int count = this.dvgData.SelectedRows.Count;
            BUProductManagerResult MyPMR = new BUProductManagerResult();
            bool ReturnValue = false;
            DialogResult dr = MessageBox.Show("确定删除此条信息吗？", "温馨提示", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            if (dr == DialogResult.OK)
            {
                for (int i = 0; i < count; i++)
                {
                    string paramClassValue = this.dvgData.SelectedRows[i].Cells["ProductClassID"].Value.ToString();
                    ReturnValue = MyPMR.DelClassData(paramClassValue);
                }
                if (ReturnValue)
                {
                    MessageBox.Show("恭喜您，删除数据成功！", "恭喜", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    brnSearch_Click(sender, e);

                }
                else
                {
                    MessageBox.Show("操作错误", "错误提示", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
    }
}
