using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using InventoryManagersystem.InventoryManager;
using BULayer;
using InventoryManagersystem.ClassAssist;


namespace InventoryManagersystem.Sales
{
    public partial class frmSalesManage : Form
    {
        BUStockPileInfo myBUStockPileInfo = new BUStockPileInfo();
        BUGetCustomerInfo myBUGetCustomerInfo = new BUGetCustomerInfo();
        DataTable MySalsedt = new DataTable();
        public frmSalesManage()
        {
            InitializeComponent(); 
        }
       

       
        private void frmSalesManage_Load(object sender, EventArgs e)
        {
            //SetCombCustomer();            
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            frmInventInfo myfrmInventInfo = new frmInventInfo();
            if (myfrmInventInfo.ShowDialog() == DialogResult.Yes)
            {
                MySalsedt.Merge(myfrmInventInfo.dt);
                for (int i = 1; i < MySalsedt.Rows.Count; i++)
                {
                    if (MySalsedt.Rows[i]["StoreHouse_ID"].ToString() == myfrmInventInfo.dt.Rows[i]["StoreHouse_ID"].ToString() && MySalsedt.Rows[i]["Product_ID"].ToString() == myfrmInventInfo.dt.Rows[i]["Product_ID"].ToString())
                    {
                        MessageBox.Show("请勿重复选择!");
                        return;
                    }
                    else
                    {
                        MySalsedt.Merge(myfrmInventInfo.dt);
                    }
                }

                    //MySalsedt.Merge(myfrmInventInfo.dt);
                    this.gdCInvent.DataSource = MySalsedt;
                    DataTable mydt = new DataTable();
                    mydt = myBUGetCustomerInfo.GetCustomerID();
                    repositoryItemComboBox1.Items.Clear();
               
                for (int i = 0; i < mydt.Rows.Count; i++)
                {                    
                    repositoryItemComboBox1.Items.Add(mydt.Rows[i]["Name"].ToString());
                }              
            }            
        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                DevExpress.XtraEditors.SimpleButton tempBtn = (DevExpress.XtraEditors.SimpleButton)sender;
                if (tempBtn == null)
                    return;
                string tempItem = tempBtn.Tag.ToString();
                foreach (Control tempControl in this.groupBox4.Controls)
                {
                    if (tempControl.GetType() == typeof(DevExpress.XtraGrid.GridControl))
                    {

                        DevExpress.XtraGrid.GridControl tempGridControl = (DevExpress.XtraGrid.GridControl)tempControl;
                        CommonOperator.DataPrint(tempGridControl, tempItem, null);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        private void btnSales_Click(object sender, EventArgs e)
        {
            try
            {
                if (this.MySalsedt ==null || this.MySalsedt.Rows.Count == 0)
                {
                    MessageBox.Show("暂无数据操作！");
                    return;
                }
                int count = gdvInvent.RowCount;                
                string[] StoreHouse_ID = new string[count];
                string[] Sales_Quantity = new string[count];
                string[] Sales_Price = new string[count];
                string[] LastLeaveDate = new string[count];
                string[] RecentQuantity = new string[count];
                string[] ProductID = new string[count];
                string[] ProductName = new string[count];
                string[] Quantity = new string[count];
                string[] TotalPrice = new string[count];

                if(count!=0)
                {
                        for (int i = 0; i < count; i++)
                        {
                            string paramCustomer = this.gdvInvent.GetDataRow(i)["Name"].ToString(); ;
                            StoreHouse_ID[i] = gdvInvent.GetDataRow(i)["StoreHouse_ID"].ToString();
                            ProductID[i] = gdvInvent.GetDataRow(i)["Product_ID"].ToString();
                            ProductName[i] = gdvInvent.GetDataRow(i)["ProductName"].ToString();
                            Quantity[i] = gdvInvent.GetDataRow(i)["Quantity"].ToString();
                            Sales_Quantity[i] = gdvInvent.GetDataRow(i)["Sales_Quantity"].ToString();
                            Sales_Price[i] = gdvInvent.GetDataRow(i)["Sales_Price"].ToString();
                            LastLeaveDate[i] = gdvInvent.GetDataRow(i)["LastLeaveDate"].ToString();
                            //扣除后的数量和总价
                            Quantity[i] =( int.Parse(Quantity[i]) - int.Parse(Sales_Quantity[i])).ToString();
                            TotalPrice[i] = (int.Parse(Quantity[i]) * double.Parse(gdvInvent.GetDataRow(i)["Price"].ToString())).ToString(); ;

                            if (Sales_Quantity[i].Length == 0|| Sales_Price[i].Length == 0 || paramCustomer.Length==0)
                            {
                                MessageBox.Show("出货单价、数量和客户不能为空!");
                            }
                            else
                            {
                                RecentQuantity[i] = (int.Parse(gdvInvent.GetDataRow(i)["Quantity"].ToString()) - int.Parse(gdvInvent.GetDataRow(i)["Sales_Quantity"].ToString())).ToString();

                                int m = myBUStockPileInfo.UpdateStockpile_Total(StoreHouse_ID[i], ProductID[i], ProductName[i], Quantity[i], TotalPrice[i]);
                                int n = myBUStockPileInfo.InsertSales_Info(ProductID[i], ProductName[i], Sales_Price[i], Sales_Quantity[i], paramCustomer,  LastLeaveDate[i]);
                                if (m > 0 && n > 0)
                                {
                                    MessageBox.Show("出库成功!");
                                    gdvInvent.SetRowCellValue(i, gdvInvent.Columns["Sales_Quantity"],null );
                                    gdvInvent.SetRowCellValue(i, gdvInvent.Columns["Sales_Price"], null);
                                }
                                else
                                {
                                    MessageBox.Show("出库失败!");
                                }
                            }
                        }
                 }                     
                else
                {
                    MessageBox.Show("请选择要出货的数据!");
                }
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
        

        private void button1_Click(object sender, EventArgs e)
        {
            //DataTable myClear = new DataTable();
            //this 
            this.MySalsedt.Clear();
            this.gdCInvent.DataSource = MySalsedt;
        }

        private void gdvInvent_ValidatingEditor_1(object sender, DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs e)
        {
            try
            {          
                if (gdvInvent.FocusedColumn.Name == "Sales_Quantity")
                {
                    int paramQuantity = Convert.ToInt32(gdvInvent.GetFocusedRowCellValue("Quantity"));
                    if (int.Parse(e.Value.ToString()) > paramQuantity)//自己写验证条件
                    {
                        e.ErrorText = "出库数量大于库存数量！";
                        e.Valid = false;
                        return;
                    }
                }
                if (gdvInvent.FocusedColumn.Name == "Sales_Price")
                {
                    if (int.Parse(e.Value.ToString())<=0)//自己写验证条件
                    {
                        e.ErrorText = "请输入正确的价格！";
                        e.Valid = false;
                        return;
                    }
                }
            }
            catch 
            {
                MessageBox.Show("请输入正确的数量和价格");
            }
        }

        private void btnExcel_Click(object sender, EventArgs e)
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "文件格式(*.xlsx)|*.xlsx";
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string name = saveFileDialog.FileName;
                    this.gdCInvent.ExportToXlsx(name);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        
    }
}
